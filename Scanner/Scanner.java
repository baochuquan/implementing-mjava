/* The following code was generated by JFlex 1.4.3 on 26/07/09 17.39 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 2006  Silvano Rivoira <silvano.rivoira@polito.it>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * This program is free software; you can redistribute it and/or modify    *
 * it under the terms of the GNU General Public License. See the file      *
 * COPYRIGHT for more information.                                         *
 *                                                                         *
 * This program is distributed in the hope that it will be useful,         *
 * but WITHOUT ANY WARRANTY;              *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* mjava  language scanner specification */

import java_cup.runtime.*;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26/07/09 17.39 from the specification file
 * <tt>mjava.flex</tt>
 */
public class Scanner implements sym, java_cup.runtime.Scanner {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;
    private static final String ZZ_NL = System.getProperty("line.separator");

    /** lexical states */
    public static final int STRING = 2;
    public static final int YYINITIAL = 0;
    public static final int CHARLITERAL = 4;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED = "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\56" +
            "\1\15\1\0\1\6\1\64\1\61\1\16\1\43\1\44\1\5\1\63" +
            "\1\52\1\14\1\12\1\4\1\10\11\11\1\60\1\51\1\55\1\53" +
            "\1\54\1\57\1\0\4\6\1\13\25\6\1\47\1\17\1\50\1\0" +
            "\1\6\1\0\1\24\1\20\1\26\1\34\1\23\1\35\1\6\1\27" +
            "\1\36\2\6\1\22\1\6\1\25\1\21\1\40\1\6\1\30\1\31" +
            "\1\33\1\41\1\42\1\37\1\32\2\6\1\45\1\62\1\46\1\0" +
            "\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0" +
            "\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0" +
            "\14\6\16\0\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0" +
            "\1\6\13\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0" +
            "\54\6\1\0\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0" +
            "\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0" +
            "\1\6\7\0\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0" +
            "\1\7\1\0\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0" +
            "\4\7\14\0\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7" +
            "\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6" +
            "\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7" +
            "\1\6\1\7\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6" +
            "\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7" +
            "\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0" +
            "\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0" +
            "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0" +
            "\2\6\1\0\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0" +
            "\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0" +
            "\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0" +
            "\3\7\13\0\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7" +
            "\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6" +
            "\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7" +
            "\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0" +
            "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0" +
            "\2\6\1\0\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0" +
            "\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0" +
            "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6" +
            "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6" +
            "\3\0\10\6\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7" +
            "\11\0\1\7\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6" +
            "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7" +
            "\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7" +
            "\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6" +
            "\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7" +
            "\7\0\2\7\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7" +
            "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7" +
            "\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7" +
            "\22\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6" +
            "\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7" +
            "\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7" +
            "\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6" +
            "\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6" +
            "\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0" +
            "\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7" +
            "\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7" +
            "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0" +
            "\24\7\1\0\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7" +
            "\71\0\42\6\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7" +
            "\6\0\12\7\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0" +
            "\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0" +
            "\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0" +
            "\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0" +
            "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0" +
            "\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0" +
            "\7\6\1\0\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0" +
            "\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0" +
            "\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7" +
            "\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0" +
            "\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7" +
            "\6\0\130\6\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0" +
            "\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6" +
            "\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6" +
            "\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6" +
            "\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6" +
            "\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6" +
            "\17\0\4\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\4\7" +
            "\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7" +
            "\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6" +
            "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6" +
            "\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6" +
            "\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0" +
            "\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0" +
            "\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0" +
            "\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0" +
            "\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0" +
            "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0" +
            "\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0" +
            "\4\7\17\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0" +
            "\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0" +
            "\1\6\1\0\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0" +
            "\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 = "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7" +
            "\1\10\1\11\1\12\14\5\1\13\1\14\1\15\1\16" +
            "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26" +
            "\1\27\1\30\1\31\1\1\1\32\1\33\1\34\2\35" +
            "\1\36\2\1\2\37\1\1\1\2\1\0\2\40\1\0" +
            "\16\5\1\41\3\5\1\42\1\43\1\44\1\45\1\46" +
            "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56" +
            "\1\57\1\60\1\61\11\0\1\40\1\0\3\5\1\62" +
            "\11\5\1\63\3\5\1\64\1\65\1\66\1\67\1\70" +
            "\1\71\1\72\1\73\1\5\1\74\1\5\1\75\1\5" +
            "\1\76\2\5\1\77\1\100\4\5\1\101\2\5\1\102" +
            "\1\5\1\103\1\104\1\105\1\106\3\5\1\107\1\110" +
            "\1\111\1\112";

    private static int[] zzUnpackAction() {
        int[] result = new int[159];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\65\0\152\0\237\0\324\0\237\0\u0109\0\237" +
            "\0\u013e\0\u0173\0\u01a8\0\u01dd\0\237\0\237\0\237\0\u0212" +
            "\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba" +
            "\0\u03ef\0\u0424\0\u0459\0\237\0\237\0\237\0\237\0\237" +
            "\0\237\0\237\0\237\0\u048e\0\u04c3\0\u04f8\0\u052d\0\237" +
            "\0\237\0\u0562\0\u0597\0\237\0\237\0\u05cc\0\u0601\0\237" +
            "\0\237\0\u0636\0\u066b\0\u06a0\0\237\0\u06d5\0\u070a\0\u073f" +
            "\0\u0173\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2" +
            "\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a" +
            "\0\u0a8f\0\u013e\0\u0ac4\0\u0af9\0\u0b2e\0\237\0\237\0\237" +
            "\0\237\0\237\0\237\0\237\0\237\0\237\0\237\0\237" +
            "\0\237\0\237\0\237\0\237\0\237\0\u0b63\0\u0b98\0\u0bcd" +
            "\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d40" +
            "\0\u0d75\0\u0daa\0\u0ddf\0\u013e\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3" +
            "\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u013e\0\u0ff1\0\u1026" +
            "\0\u105b\0\237\0\237\0\237\0\237\0\237\0\237\0\237" +
            "\0\237\0\u1090\0\u013e\0\u10c5\0\u013e\0\u10fa\0\u013e\0\u112f" +
            "\0\u1164\0\u013e\0\u013e\0\u1199\0\u11ce\0\u1203\0\u1238\0\u013e" +
            "\0\u126d\0\u12a2\0\u013e\0\u12d7\0\u013e\0\u013e\0\u013e\0\u013e" +
            "\0\u130c\0\u1341\0\u1376\0\u013e\0\u013e\0\u013e\0\u013e";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[159];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 = "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12" +
            "\1\13\1\14\1\11\1\15\1\16\1\17\1\4\1\20" +
            "\2\11\1\21\1\11\1\22\1\23\1\11\1\24\1\25" +
            "\1\11\1\26\1\11\1\27\1\30\1\31\1\32\1\11" +
            "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42" +
            "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52" +
            "\1\53\1\54\1\55\1\56\1\57\1\60\12\56\1\61" +
            "\1\56\1\62\45\56\1\63\1\64\1\65\13\63\1\4" +
            "\1\66\45\63\67\0\1\6\66\0\1\67\1\70\65\0" +
            "\4\11\1\0\1\11\4\0\23\11\32\0\2\71\1\72" +
            "\1\73\7\0\1\73\51\0\2\13\1\72\1\73\7\0" +
            "\1\73\51\0\2\72\61\0\4\11\1\0\1\11\4\0" +
            "\1\11\1\74\21\11\30\0\4\11\1\0\1\11\4\0" +
            "\2\11\1\75\7\11\1\76\10\11\30\0\4\11\1\0" +
            "\1\11\4\0\3\11\1\77\15\11\1\100\1\11\30\0" +
            "\4\11\1\0\1\11\4\0\2\11\1\101\4\11\1\102" +
            "\13\11\30\0\4\11\1\0\1\11\4\0\3\11\1\103" +
            "\17\11\30\0\4\11\1\0\1\11\4\0\21\11\1\104" +
            "\1\11\30\0\4\11\1\0\1\11\4\0\7\11\1\105" +
            "\1\106\12\11\30\0\4\11\1\0\1\11\4\0\2\11" +
            "\1\107\1\11\1\110\16\11\30\0\4\11\1\0\1\11" +
            "\4\0\5\11\1\111\7\11\1\112\5\11\30\0\4\11" +
            "\1\0\1\11\4\0\7\11\1\113\13\11\30\0\4\11" +
            "\1\0\1\11\4\0\21\11\1\114\1\11\30\0\4\11" +
            "\1\0\1\11\4\0\1\11\1\115\21\11\75\0\1\116" +
            "\64\0\1\117\64\0\1\120\64\0\1\121\72\0\1\122" +
            "\65\0\1\123\2\0\1\56\2\0\12\56\1\0\1\56" +
            "\1\0\45\56\2\0\1\60\62\0\2\124\1\0\12\124" +
            "\1\125\1\126\1\127\1\130\4\124\1\131\2\124\1\132" +
            "\2\124\1\133\1\124\1\134\27\124\16\0\1\135\50\0" +
            "\1\65\77\0\1\136\1\137\1\140\1\141\4\0\1\142" +
            "\2\0\1\143\2\0\1\144\1\0\1\145\27\0\1\67" +
            "\1\5\1\6\62\67\5\70\1\146\57\70\10\0\2\72" +
            "\1\0\1\73\7\0\1\73\51\0\2\147\2\0\1\150" +
            "\46\0\1\150\7\0\4\11\1\0\1\11\4\0\1\11" +
            "\1\151\21\11\30\0\4\11\1\0\1\11\4\0\11\11" +
            "\1\152\11\11\30\0\4\11\1\0\1\11\4\0\13\11" +
            "\1\153\7\11\30\0\4\11\1\0\1\11\4\0\17\11" +
            "\1\154\3\11\30\0\4\11\1\0\1\11\4\0\2\11" +
            "\1\155\20\11\30\0\4\11\1\0\1\11\4\0\4\11" +
            "\1\156\16\11\30\0\4\11\1\0\1\11\4\0\4\11" +
            "\1\157\16\11\30\0\4\11\1\0\1\11\4\0\13\11" +
            "\1\160\7\11\30\0\4\11\1\0\1\11\4\0\20\11" +
            "\1\161\2\11\30\0\4\11\1\0\1\11\4\0\16\11" +
            "\1\162\4\11\30\0\4\11\1\0\1\11\4\0\21\11" +
            "\1\163\1\11\30\0\4\11\1\0\1\11\4\0\1\11" +
            "\1\164\21\11\30\0\4\11\1\0\1\11\4\0\2\11" +
            "\1\165\20\11\30\0\4\11\1\0\1\11\4\0\13\11" +
            "\1\166\7\11\30\0\4\11\1\0\1\11\4\0\16\11" +
            "\1\167\4\11\30\0\4\11\1\0\1\11\4\0\1\170" +
            "\22\11\30\0\4\11\1\0\1\11\4\0\16\11\1\171" +
            "\4\11\40\0\1\172\64\0\1\173\64\0\1\174\64\0" +
            "\1\175\64\0\1\176\64\0\1\177\64\0\1\200\64\0" +
            "\1\201\46\0\4\70\1\6\1\146\57\70\10\0\2\147" +
            "\61\0\4\11\1\0\1\11\4\0\2\11\1\202\20\11" +
            "\30\0\4\11\1\0\1\11\4\0\3\11\1\203\17\11" +
            "\30\0\4\11\1\0\1\11\4\0\3\11\1\204\17\11" +
            "\30\0\4\11\1\0\1\11\4\0\2\11\1\205\20\11" +
            "\30\0\4\11\1\0\1\11\4\0\11\11\1\206\11\11" +
            "\30\0\4\11\1\0\1\11\4\0\10\11\1\207\12\11" +
            "\30\0\4\11\1\0\1\11\4\0\21\11\1\210\1\11" +
            "\30\0\4\11\1\0\1\11\4\0\3\11\1\211\17\11" +
            "\30\0\4\11\1\0\1\11\4\0\11\11\1\212\11\11" +
            "\30\0\4\11\1\0\1\11\4\0\3\11\1\213\17\11" +
            "\30\0\4\11\1\0\1\11\4\0\4\11\1\214\16\11" +
            "\30\0\4\11\1\0\1\11\4\0\11\11\1\215\11\11" +
            "\30\0\4\11\1\0\1\11\4\0\2\11\1\216\20\11" +
            "\30\0\4\11\1\0\1\11\4\0\2\11\1\217\20\11" +
            "\30\0\4\11\1\0\1\11\4\0\14\11\1\220\6\11" +
            "\30\0\4\11\1\0\1\11\4\0\3\11\1\221\17\11" +
            "\30\0\4\11\1\0\1\11\4\0\5\11\1\222\15\11" +
            "\30\0\4\11\1\0\1\11\4\0\11\11\1\223\11\11" +
            "\30\0\4\11\1\0\1\11\4\0\10\11\1\224\12\11" +
            "\30\0\4\11\1\0\1\11\4\0\10\11\1\225\12\11" +
            "\30\0\4\11\1\0\1\11\4\0\13\11\1\226\7\11" +
            "\30\0\4\11\1\0\1\11\4\0\3\11\1\227\17\11" +
            "\30\0\4\11\1\0\1\11\4\0\3\11\1\230\17\11" +
            "\30\0\4\11\1\0\1\11\4\0\16\11\1\231\4\11" +
            "\30\0\4\11\1\0\1\11\4\0\4\11\1\232\16\11" +
            "\30\0\4\11\1\0\1\11\4\0\14\11\1\233\6\11" +
            "\30\0\4\11\1\0\1\11\4\0\5\11\1\234\15\11" +
            "\30\0\4\11\1\0\1\11\4\0\6\11\1\235\14\11" +
            "\30\0\4\11\1\0\1\11\4\0\5\11\1\236\15\11" +
            "\30\0\4\11\1\0\1\11\4\0\11\11\1\237\11\11" +
            "\22\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[5035];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\3\0\1\11\1\1\1\11\1\1\1\11\4\1\3\11" +
            "\14\1\10\11\4\1\2\11\2\1\2\11\2\1\2\11" +
            "\3\1\1\11\2\1\1\0\2\1\1\0\22\1\20\11" +
            "\11\0\1\1\1\0\21\1\10\11\36\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[159];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do
                result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline + 1, yycolumn + 1);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline + 1, yycolumn + 1, value);
    }

    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    public Scanner(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public Scanner(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0; /* index in packed string */
        int j = 0; /* index in unpacked array */
        while (i < 1760) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do
                map[j++] = value;
            while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * 
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }

        /* finally: fill the buffer with new input */
        int numRead = zzReader.read(zzBuffer, zzEndRead,
                zzBuffer.length - zzEndRead);

        if (numRead > 0) {
            zzEndRead += numRead;
            return false;
        }
        // unlikely but not impossible: read 0 characters, but not at end of stream
        if (numRead == 0) {
            int c = zzReader.read();
            if (c == -1) {
                return true;
            } else {
                zzBuffer[zzEndRead++] = (char) c;
                return false;
            }
        }

        // numRead < 0
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true; /* indicate end of file */
        zzEndRead = zzStartRead; /* invalidate buffer */

        if (zzReader != null)
            zzReader.close();
    }

    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * 
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }

    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }

    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
                switch (zzBufferL[zzCurrentPosL]) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn++;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek)
                    yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1)
                        break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8)
                            break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 35:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [124] { return symbol(GTEQ); }"); {
                    return symbol(GTEQ);
                }
                case 75:
                    break;
                case 20:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [117] { return symbol(GT); }"); {
                    return symbol(GT);
                }
                case 76:
                    break;
                case 37:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [125] { return symbol(NOTEQ); }"); {
                    return symbol(NOTEQ);
                }
                case 77:
                    break;
                case 9:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [136] { yybegin(STRING); string.setLength(0); }"); {
                    yybegin(STRING);
                    string.setLength(0);
                }
                case 78:
                    break;
                case 13:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [107] { return symbol(LBRACE); }"); {
                    return symbol(LBRACE);
                }
                case 79:
                    break;
                case 19:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [116] { return symbol(EQ); }"); {
                    return symbol(EQ);
                }
                case 80:
                    break;
                case 21:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [118] { return symbol(LT); }"); {
                    return symbol(LT);
                }
                case 81:
                    break;
                case 74:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [84] { return symbol(EXTENDS); }"); {
                    return symbol(EXTENDS);
                }
                case 82:
                    break;
                case 47:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [165] { string.append( \'\\t\' ); }"); {
                    string.append('\t');
                }
                case 83:
                    break;
                case 72:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [89] { return symbol(PUBLIC); }"); {
                    return symbol(PUBLIC);
                }
                case 84:
                    break;
                case 58:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println(
                            "action [184] { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character(\'\\t\')); }"); {
                    yybegin(YYINITIAL);
                    return symbol(CHARACTER_LITERAL, new Character('\t'));
                }
                case 85:
                    break;
                case 73:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [80] { return symbol(BOOLEAN); }"); {
                    return symbol(BOOLEAN);
                }
                case 86:
                    break;
                case 10:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [139] { yybegin(CHARLITERAL); }"); {
                    yybegin(CHARLITERAL);
                }
                case 87:
                    break;
                case 34:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [122] { return symbol(EQEQ); }"); {
                    return symbol(EQEQ);
                }
                case 88:
                    break;
                case 64:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [97] { return symbol(BOOLEAN_LITERAL, new Boolean(true)); }"); {
                    return symbol(BOOLEAN_LITERAL, new Boolean(true));
                }
                case 89:
                    break;
                case 26:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [129] { return symbol(PLUS); }"); {
                    return symbol(PLUS);
                }
                case 90:
                    break;
                case 45:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [166] { string.append( \'\\n\' ); }"); {
                    string.append('\n');
                }
                case 91:
                    break;
                case 12:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [106] { return symbol(RPAREN); }"); {
                    return symbol(RPAREN);
                }
                case 92:
                    break;
                case 56:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println(
                            "action [185] { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character(\'\\n\')); }"); {
                    yybegin(YYINITIAL);
                    return symbol(CHARACTER_LITERAL, new Character('\n'));
                }
                case 93:
                    break;
                case 66:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [82] { return symbol(CLASS); }"); {
                    return symbol(CLASS);
                }
                case 94:
                    break;
                case 63:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [94] { return symbol(THIS); }"); {
                    return symbol(THIS);
                }
                case 95:
                    break;
                case 32:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println(
                            "action [146] { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()))); }"); {
                    return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0, yylength())));
                }
                case 96:
                    break;
                case 50:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [87] { return symbol(NEW); }"); {
                    return symbol(NEW);
                }
                case 97:
                    break;
                case 23:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [120] { return symbol(QUESTION); }"); {
                    return symbol(QUESTION);
                }
                case 98:
                    break;
                case 3:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [132] { return symbol(DIV); }"); {
                    return symbol(DIV);
                }
                case 99:
                    break;
                case 33:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [88] { return symbol(IF); }"); {
                    return symbol(IF);
                }
                case 100:
                    break;
                case 62:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [81] { return symbol(CHAR); }"); {
                    return symbol(CHAR);
                }
                case 101:
                    break;
                case 5:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [155] { return symbol(IDENTIFIER, yytext()); }"); {
                    return symbol(IDENTIFIER, yytext());
                }
                case 102:
                    break;
                case 40:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println(
                            "action [175] { throw new RuntimeException(\"Illegal escape sequence \\\"\"+yytext()+\"\\\"\"); }"); {
                    throw new RuntimeException("Illegal escape sequence \"" + yytext() + "\"");
                }
                case 103:
                    break;
                case 27:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [133] { return symbol(MOD); }"); {
                    return symbol(MOD);
                }
                case 104:
                    break;
                case 11:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [105] { return symbol(LPAREN); }"); {
                    return symbol(LPAREN);
                }
                case 105:
                    break;
                case 46:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [168] { string.append( \'\\r\' ); }"); {
                    string.append('\r');
                }
                case 106:
                    break;
                case 61:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [101] { return symbol(NULL_LITERAL); }"); {
                    return symbol(NULL_LITERAL);
                }
                case 107:
                    break;
                case 44:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [164] { string.append( \'\\b\' ); }"); {
                    string.append('\b');
                }
                case 108:
                    break;
                case 57:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println(
                            "action [187] { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character(\'\\r\')); }"); {
                    yybegin(YYINITIAL);
                    return symbol(CHARACTER_LITERAL, new Character('\r'));
                }
                case 109:
                    break;
                case 55:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println(
                            "action [183] { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character(\'\\b\')); }"); {
                    yybegin(YYINITIAL);
                    return symbol(CHARACTER_LITERAL, new Character('\b'));
                }
                case 110:
                    break;
                case 29:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println(
                            "action [176] { throw new RuntimeException(\"Unterminated string at end of line\"); }"); {
                    throw new RuntimeException("Unterminated string at end of line");
                }
                case 111:
                    break;
                case 41:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [169] { string.append( \'\\\"\' ); }"); {
                    string.append('\"');
                }
                case 112:
                    break;
                case 16:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [110] { return symbol(RBRACK); }"); {
                    return symbol(RBRACK);
                }
                case 113:
                    break;
                case 17:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [111] { return symbol(SEMICOLON); }"); {
                    return symbol(SEMICOLON);
                }
                case 114:
                    break;
                case 6:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [143] { return symbol(INTEGER_LITERAL, new Integer(yytext())); }"); {
                    return symbol(INTEGER_LITERAL, new Integer(yytext()));
                }
                case 115:
                    break;
                case 52:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println(
                            "action [188] { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character(\'\\\"\')); }"); {
                    yybegin(YYINITIAL);
                    return symbol(CHARACTER_LITERAL, new Character('\"'));
                }
                case 116:
                    break;
                case 42:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [170] { string.append( \'\\\'\' ); }"); {
                    string.append('\'');
                }
                case 117:
                    break;
                case 68:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [85] { return symbol(FLOAT); }"); {
                    return symbol(FLOAT);
                }
                case 118:
                    break;
                case 43:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [171] { string.append( \'\\\\\' ); }"); {
                    string.append('\\');
                }
                case 119:
                    break;
                case 67:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [90] { return symbol(SUPER); }"); {
                    return symbol(SUPER);
                }
                case 120:
                    break;
                case 8:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [130] { return symbol(MINUS); }"); {
                    return symbol(MINUS);
                }
                case 121:
                    break;
                case 53:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println(
                            "action [189] { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character(\'\\\'\')); }"); {
                    yybegin(YYINITIAL);
                    return symbol(CHARACTER_LITERAL, new Character('\''));
                }
                case 122:
                    break;
                case 7:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [113] { return symbol(DOT); }"); {
                    return symbol(DOT);
                }
                case 123:
                    break;
                case 54:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println(
                            "action [190] { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character(\'\\\\\')); }"); {
                    yybegin(YYINITIAL);
                    return symbol(CHARACTER_LITERAL, new Character('\\'));
                }
                case 124:
                    break;
                case 51:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [86] { return symbol(INT); }"); {
                    return symbol(INT);
                }
                case 125:
                    break;
                case 1:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [199] { return symbol(ILLEGAL_CHARACTER, yytext()); }"); {
                    return symbol(ILLEGAL_CHARACTER, yytext());
                }
                case 126:
                    break;
                case 24:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [121] { return symbol(COLON); }"); {
                    return symbol(COLON);
                }
                case 127:
                    break;
                case 36:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [123] { return symbol(LTEQ); }"); {
                    return symbol(LTEQ);
                }
                case 128:
                    break;
                case 48:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [167] { string.append( \'\\f\' ); }"); {
                    string.append('\f');
                }
                case 129:
                    break;
                case 65:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [92] { return symbol(VOID); }"); {
                    return symbol(VOID);
                }
                case 130:
                    break;
                case 22:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [119] { return symbol(NOT); }"); {
                    return symbol(NOT);
                }
                case 131:
                    break;
                case 30:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println(
                            "action [159] { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString()); }"); {
                    yybegin(YYINITIAL);
                    return symbol(STRING_LITERAL, string.toString());
                }
                case 132:
                    break;
                case 14:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [108] { return symbol(RBRACE); }"); {
                    return symbol(RBRACE);
                }
                case 133:
                    break;
                case 59:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println(
                            "action [186] { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character(\'\\f\')); }"); {
                    yybegin(YYINITIAL);
                    return symbol(CHARACTER_LITERAL, new Character('\f'));
                }
                case 134:
                    break;
                case 4:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [131] { return symbol(MULT); }"); {
                    return symbol(MULT);
                }
                case 135:
                    break;
                case 2:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [152] { /* ignore */ }"); { /* ignore */
                }
                case 136:
                    break;
                case 25:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [127] { return symbol(AT); }"); {
                    return symbol(AT);
                }
                case 137:
                    break;
                case 15:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [109] { return symbol(LBRACK); }"); {
                    return symbol(LBRACK);
                }
                case 138:
                    break;
                case 39:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [128] { return symbol(OROR); }"); {
                    return symbol(OROR);
                }
                case 139:
                    break;
                case 28:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [161] { string.append( yytext() ); }"); {
                    string.append(yytext());
                }
                case 140:
                    break;
                case 69:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [98] { return symbol(BOOLEAN_LITERAL, new Boolean(false)); }"); {
                    return symbol(BOOLEAN_LITERAL, new Boolean(false));
                }
                case 141:
                    break;
                case 38:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [126] { return symbol(ANDAND); }"); {
                    return symbol(ANDAND);
                }
                case 142:
                    break;
                case 70:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [93] { return symbol(WHILE); }"); {
                    return symbol(WHILE);
                }
                case 143:
                    break;
                case 31:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println(
                            "action [194] { throw new RuntimeException(\"Unterminated character literal at end of line\"); }"); {
                    throw new RuntimeException("Unterminated character literal at end of line");
                }
                case 144:
                    break;
                case 60:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [83] { return symbol(ELSE); }"); {
                    return symbol(ELSE);
                }
                case 145:
                    break;
                case 49:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println(
                            "action [180] { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character(yytext().charAt(0))); }"); {
                    yybegin(YYINITIAL);
                    return symbol(CHARACTER_LITERAL, new Character(yytext().charAt(0)));
                }
                case 146:
                    break;
                case 18:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [112] { return symbol(COMMA); }"); {
                    return symbol(COMMA);
                }
                case 147:
                    break;
                case 71:
                    System.out.println("line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: --"
                            + yytext() + "--");
                    System.out.println("action [91] { return symbol(RETURN); }"); {
                    return symbol(RETURN);
                }
                case 148:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        zzDoEOF();
                        {
                            System.out.println(
                                    "line: " + (yyline + 1) + " " + "col: " + (yycolumn + 1) + " " + "match: <<EOF>>");
                            System.out.println("action [200] { return symbol(EOF); }");
                            return symbol(EOF);
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }

    /**
     * Runs the scanner on input files.
     *
     * This main method is the debugging routine for the scanner.
     * It prints debugging information about each returned token to
     * System.out until the end of file is reached, or an error occured.
     *
     * @param argv the command line, contains the filenames to run
     *             the scanner on.
     */
    public static void main(String argv[]) {
        if (argv.length == 0) {
            System.out.println("Usage : java Scanner <inputfile>");
        } else {
            for (int i = 0; i < argv.length; i++) {
                Scanner scanner = null;
                try {
                    scanner = new Scanner(new java.io.FileReader(argv[i]));
                    do {
                        System.out.println(scanner.next_token());
                    } while (!scanner.zzAtEOF);

                } catch (java.io.FileNotFoundException e) {
                    System.out.println("File not found : \"" + argv[i] + "\"");
                } catch (java.io.IOException e) {
                    System.out.println("IO error scanning file \"" + argv[i] + "\"");
                    System.out.println(e);
                } catch (Exception e) {
                    System.out.println("Unexpected exception:");
                    e.printStackTrace();
                }
            }
        }
    }

}